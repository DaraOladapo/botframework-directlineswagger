// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using ConsoleApplication2.Models;
using Microsoft.Rest;
using Newtonsoft.Json.Linq;

namespace ConsoleApplication2.Models
{
    public partial class Activity
    {
        private string _action;
        
        /// <summary>
        /// Optional. ContactAdded/Removed action
        /// </summary>
        public string Action
        {
            get { return this._action; }
            set { this._action = value; }
        }
        
        private string _attachmentLayout;
        
        /// <summary>
        /// Optional. AttachmentLayout - hint for how to deal with multiple
        /// attachments Values: [list|carousel] Default:list
        /// </summary>
        public string AttachmentLayout
        {
            get { return this._attachmentLayout; }
            set { this._attachmentLayout = value; }
        }
        
        private IList<Attachment> _attachments;
        
        /// <summary>
        /// Optional. Attachments
        /// </summary>
        public IList<Attachment> Attachments
        {
            get { return this._attachments; }
            set { this._attachments = value; }
        }
        
        private string _channelData;
        
        /// <summary>
        /// Optional. Channel specific payload
        /// </summary>
        public string ChannelData
        {
            get { return this._channelData; }
            set { this._channelData = value; }
        }
        
        private string _channelId;
        
        /// <summary>
        /// Optional. ChannelId the activity was on
        /// </summary>
        public string ChannelId
        {
            get { return this._channelId; }
            set { this._channelId = value; }
        }
        
        private ConversationAccount _conversation;
        
        /// <summary>
        /// Optional. Conversation
        /// </summary>
        public ConversationAccount Conversation
        {
            get { return this._conversation; }
            set { this._conversation = value; }
        }
        
        private IList<Entity> _entities;
        
        /// <summary>
        /// Optional. Collection of Entity objects, each of which contains
        /// metadata about this activity. Each Entity object is typed.
        /// </summary>
        public IList<Entity> Entities
        {
            get { return this._entities; }
            set { this._entities = value; }
        }
        
        private ChannelAccount _fromVariable;
        
        /// <summary>
        /// Optional. Sender address
        /// </summary>
        public ChannelAccount From
        {
            get { return this._fromVariable; }
            set { this._fromVariable = value; }
        }
        
        private bool? _historyDisclosed;
        
        /// <summary>
        /// Optional. the previous history of the channel was disclosed
        /// </summary>
        public bool? HistoryDisclosed
        {
            get { return this._historyDisclosed; }
            set { this._historyDisclosed = value; }
        }
        
        private string _id;
        
        /// <summary>
        /// Optional. Id for the activity
        /// </summary>
        public string ID
        {
            get { return this._id; }
            set { this._id = value; }
        }
        
        private string _locale;
        
        /// <summary>
        /// Optional. The language code of the Text field
        /// </summary>
        public string Locale
        {
            get { return this._locale; }
            set { this._locale = value; }
        }
        
        private DateTimeOffset? _localTimestamp;
        
        /// <summary>
        /// Optional. Local time when message was sent (set by client Ex:
        /// 2016-09-23T13:07:49.4714686-07:00)
        /// </summary>
        public DateTimeOffset? LocalTimestamp
        {
            get { return this._localTimestamp; }
            set { this._localTimestamp = value; }
        }
        
        private IList<ChannelAccount> _membersAdded;
        
        /// <summary>
        /// Optional. Array of address added
        /// </summary>
        public IList<ChannelAccount> MembersAdded
        {
            get { return this._membersAdded; }
            set { this._membersAdded = value; }
        }
        
        private IList<ChannelAccount> _membersRemoved;
        
        /// <summary>
        /// Optional. Array of addresses removed
        /// </summary>
        public IList<ChannelAccount> MembersRemoved
        {
            get { return this._membersRemoved; }
            set { this._membersRemoved = value; }
        }
        
        private ChannelAccount _recipient;
        
        /// <summary>
        /// Optional. (Outbound to bot only) Bot's address that received the
        /// message
        /// </summary>
        public ChannelAccount Recipient
        {
            get { return this._recipient; }
            set { this._recipient = value; }
        }
        
        private string _replyToId;
        
        /// <summary>
        /// Optional. the original id this message is a response to
        /// </summary>
        public string ReplyToId
        {
            get { return this._replyToId; }
            set { this._replyToId = value; }
        }
        
        private string _serviceUrl;
        
        /// <summary>
        /// Optional. Service endpoint
        /// </summary>
        public string ServiceUrl
        {
            get { return this._serviceUrl; }
            set { this._serviceUrl = value; }
        }
        
        private string _summary;
        
        /// <summary>
        /// Optional. Text to display if you can't render cards
        /// </summary>
        public string Summary
        {
            get { return this._summary; }
            set { this._summary = value; }
        }
        
        private string _text;
        
        /// <summary>
        /// Optional. Content for the message
        /// </summary>
        public string Text
        {
            get { return this._text; }
            set { this._text = value; }
        }
        
        private string _textFormat;
        
        /// <summary>
        /// Optional. Format of text fields [plain|markdown] Default:markdown
        /// </summary>
        public string TextFormat
        {
            get { return this._textFormat; }
            set { this._textFormat = value; }
        }
        
        private DateTimeOffset? _timestamp;
        
        /// <summary>
        /// Optional. UTC Time when message was sent (Set by service)
        /// </summary>
        public DateTimeOffset? Timestamp
        {
            get { return this._timestamp; }
            set { this._timestamp = value; }
        }
        
        private string _topicName;
        
        /// <summary>
        /// Optional. Conversations new topic name
        /// </summary>
        public string TopicName
        {
            get { return this._topicName; }
            set { this._topicName = value; }
        }
        
        private string _type;
        
        /// <summary>
        /// Optional. The type of the activity
        /// [message|contactRelationUpdate|converationUpdate|typing]
        /// </summary>
        public string Type
        {
            get { return this._type; }
            set { this._type = value; }
        }
        
        private string _value;
        
        /// <summary>
        /// Optional. Open ended value
        /// </summary>
        public string Value
        {
            get { return this._value; }
            set { this._value = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the Activity class.
        /// </summary>
        public Activity()
        {
            this.Attachments = new LazyList<Attachment>();
            this.Entities = new LazyList<Entity>();
            this.MembersAdded = new LazyList<ChannelAccount>();
            this.MembersRemoved = new LazyList<ChannelAccount>();
        }
        
        /// <summary>
        /// Deserialize the object
        /// </summary>
        public virtual void DeserializeJson(JToken inputObject)
        {
            if (inputObject != null && inputObject.Type != JTokenType.Null)
            {
                JToken actionValue = inputObject["action"];
                if (actionValue != null && actionValue.Type != JTokenType.Null)
                {
                    this.Action = ((string)actionValue);
                }
                JToken attachmentLayoutValue = inputObject["attachmentLayout"];
                if (attachmentLayoutValue != null && attachmentLayoutValue.Type != JTokenType.Null)
                {
                    this.AttachmentLayout = ((string)attachmentLayoutValue);
                }
                JToken attachmentsSequence = ((JToken)inputObject["attachments"]);
                if (attachmentsSequence != null && attachmentsSequence.Type != JTokenType.Null)
                {
                    foreach (JToken attachmentsValue in ((JArray)attachmentsSequence))
                    {
                        Attachment attachment = new Attachment();
                        attachment.DeserializeJson(attachmentsValue);
                        this.Attachments.Add(attachment);
                    }
                }
                JToken channelDataValue = inputObject["channelData"];
                if (channelDataValue != null && channelDataValue.Type != JTokenType.Null)
                {
                    this.ChannelData = channelDataValue.ToString(Newtonsoft.Json.Formatting.Indented);
                }
                JToken channelIdValue = inputObject["channelId"];
                if (channelIdValue != null && channelIdValue.Type != JTokenType.Null)
                {
                    this.ChannelId = ((string)channelIdValue);
                }
                JToken conversationValue = inputObject["conversation"];
                if (conversationValue != null && conversationValue.Type != JTokenType.Null)
                {
                    ConversationAccount conversationAccount = new ConversationAccount();
                    conversationAccount.DeserializeJson(conversationValue);
                    this.Conversation = conversationAccount;
                }
                JToken entitiesSequence = ((JToken)inputObject["entities"]);
                if (entitiesSequence != null && entitiesSequence.Type != JTokenType.Null)
                {
                    foreach (JToken entitiesValue in ((JArray)entitiesSequence))
                    {
                        Entity entity = new Entity();
                        entity.DeserializeJson(entitiesValue);
                        this.Entities.Add(entity);
                    }
                }
                JToken fromValue = inputObject["from"];
                if (fromValue != null && fromValue.Type != JTokenType.Null)
                {
                    ChannelAccount channelAccount = new ChannelAccount();
                    channelAccount.DeserializeJson(fromValue);
                    this.From = channelAccount;
                }
                JToken historyDisclosedValue = inputObject["historyDisclosed"];
                if (historyDisclosedValue != null && historyDisclosedValue.Type != JTokenType.Null)
                {
                    this.HistoryDisclosed = ((bool)historyDisclosedValue);
                }
                JToken idValue = inputObject["id"];
                if (idValue != null && idValue.Type != JTokenType.Null)
                {
                    this.ID = ((string)idValue);
                }
                JToken localeValue = inputObject["locale"];
                if (localeValue != null && localeValue.Type != JTokenType.Null)
                {
                    this.Locale = ((string)localeValue);
                }
                JToken localTimestampValue = inputObject["localTimestamp"];
                if (localTimestampValue != null && localTimestampValue.Type != JTokenType.Null)
                {
                    this.LocalTimestamp = ((DateTimeOffset)localTimestampValue);
                }
                JToken membersAddedSequence = ((JToken)inputObject["membersAdded"]);
                if (membersAddedSequence != null && membersAddedSequence.Type != JTokenType.Null)
                {
                    foreach (JToken membersAddedValue in ((JArray)membersAddedSequence))
                    {
                        ChannelAccount channelAccount2 = new ChannelAccount();
                        channelAccount2.DeserializeJson(membersAddedValue);
                        this.MembersAdded.Add(channelAccount2);
                    }
                }
                JToken membersRemovedSequence = ((JToken)inputObject["membersRemoved"]);
                if (membersRemovedSequence != null && membersRemovedSequence.Type != JTokenType.Null)
                {
                    foreach (JToken membersRemovedValue in ((JArray)membersRemovedSequence))
                    {
                        ChannelAccount channelAccount3 = new ChannelAccount();
                        channelAccount3.DeserializeJson(membersRemovedValue);
                        this.MembersRemoved.Add(channelAccount3);
                    }
                }
                JToken recipientValue = inputObject["recipient"];
                if (recipientValue != null && recipientValue.Type != JTokenType.Null)
                {
                    ChannelAccount channelAccount4 = new ChannelAccount();
                    channelAccount4.DeserializeJson(recipientValue);
                    this.Recipient = channelAccount4;
                }
                JToken replyToIdValue = inputObject["replyToId"];
                if (replyToIdValue != null && replyToIdValue.Type != JTokenType.Null)
                {
                    this.ReplyToId = ((string)replyToIdValue);
                }
                JToken serviceUrlValue = inputObject["serviceUrl"];
                if (serviceUrlValue != null && serviceUrlValue.Type != JTokenType.Null)
                {
                    this.ServiceUrl = ((string)serviceUrlValue);
                }
                JToken summaryValue = inputObject["summary"];
                if (summaryValue != null && summaryValue.Type != JTokenType.Null)
                {
                    this.Summary = ((string)summaryValue);
                }
                JToken textValue = inputObject["text"];
                if (textValue != null && textValue.Type != JTokenType.Null)
                {
                    this.Text = ((string)textValue);
                }
                JToken textFormatValue = inputObject["textFormat"];
                if (textFormatValue != null && textFormatValue.Type != JTokenType.Null)
                {
                    this.TextFormat = ((string)textFormatValue);
                }
                JToken timestampValue = inputObject["timestamp"];
                if (timestampValue != null && timestampValue.Type != JTokenType.Null)
                {
                    this.Timestamp = ((DateTimeOffset)timestampValue);
                }
                JToken topicNameValue = inputObject["topicName"];
                if (topicNameValue != null && topicNameValue.Type != JTokenType.Null)
                {
                    this.TopicName = ((string)topicNameValue);
                }
                JToken typeValue = inputObject["type"];
                if (typeValue != null && typeValue.Type != JTokenType.Null)
                {
                    this.Type = ((string)typeValue);
                }
                JToken valueValue = inputObject["value"];
                if (valueValue != null && valueValue.Type != JTokenType.Null)
                {
                    this.Value = valueValue.ToString(Newtonsoft.Json.Formatting.Indented);
                }
            }
        }
        
        /// <summary>
        /// Serialize the object
        /// </summary>
        /// <returns>
        /// Returns the json model for the type Activity
        /// </returns>
        public virtual JToken SerializeJson(JToken outputObject)
        {
            if (outputObject == null)
            {
                outputObject = new JObject();
            }
            if (this.Action != null)
            {
                outputObject["action"] = this.Action;
            }
            if (this.AttachmentLayout != null)
            {
                outputObject["attachmentLayout"] = this.AttachmentLayout;
            }
            JArray attachmentsSequence = null;
            if (this.Attachments != null)
            {
                if (this.Attachments is ILazyCollection<Attachment> == false || ((ILazyCollection<Attachment>)this.Attachments).IsInitialized)
                {
                    attachmentsSequence = new JArray();
                    outputObject["attachments"] = attachmentsSequence;
                    foreach (Attachment attachmentsItem in this.Attachments)
                    {
                        if (attachmentsItem != null)
                        {
                            attachmentsSequence.Add(attachmentsItem.SerializeJson(null));
                        }
                    }
                }
            }
            if (this.ChannelData != null)
            {
                outputObject["channelData"] = JObject.Parse(this.ChannelData);
            }
            if (this.ChannelId != null)
            {
                outputObject["channelId"] = this.ChannelId;
            }
            if (this.Conversation != null)
            {
                outputObject["conversation"] = this.Conversation.SerializeJson(null);
            }
            JArray entitiesSequence = null;
            if (this.Entities != null)
            {
                if (this.Entities is ILazyCollection<Entity> == false || ((ILazyCollection<Entity>)this.Entities).IsInitialized)
                {
                    entitiesSequence = new JArray();
                    outputObject["entities"] = entitiesSequence;
                    foreach (Entity entitiesItem in this.Entities)
                    {
                        if (entitiesItem != null)
                        {
                            entitiesSequence.Add(entitiesItem.SerializeJson(null));
                        }
                    }
                }
            }
            if (this.From != null)
            {
                outputObject["from"] = this.From.SerializeJson(null);
            }
            if (this.HistoryDisclosed != null)
            {
                outputObject["historyDisclosed"] = this.HistoryDisclosed.Value;
            }
            if (this.ID != null)
            {
                outputObject["id"] = this.ID;
            }
            if (this.Locale != null)
            {
                outputObject["locale"] = this.Locale;
            }
            if (this.LocalTimestamp != null)
            {
                outputObject["localTimestamp"] = this.LocalTimestamp.Value;
            }
            JArray membersAddedSequence = null;
            if (this.MembersAdded != null)
            {
                if (this.MembersAdded is ILazyCollection<ChannelAccount> == false || ((ILazyCollection<ChannelAccount>)this.MembersAdded).IsInitialized)
                {
                    membersAddedSequence = new JArray();
                    outputObject["membersAdded"] = membersAddedSequence;
                    foreach (ChannelAccount membersAddedItem in this.MembersAdded)
                    {
                        if (membersAddedItem != null)
                        {
                            membersAddedSequence.Add(membersAddedItem.SerializeJson(null));
                        }
                    }
                }
            }
            JArray membersRemovedSequence = null;
            if (this.MembersRemoved != null)
            {
                if (this.MembersRemoved is ILazyCollection<ChannelAccount> == false || ((ILazyCollection<ChannelAccount>)this.MembersRemoved).IsInitialized)
                {
                    membersRemovedSequence = new JArray();
                    outputObject["membersRemoved"] = membersRemovedSequence;
                    foreach (ChannelAccount membersRemovedItem in this.MembersRemoved)
                    {
                        if (membersRemovedItem != null)
                        {
                            membersRemovedSequence.Add(membersRemovedItem.SerializeJson(null));
                        }
                    }
                }
            }
            if (this.Recipient != null)
            {
                outputObject["recipient"] = this.Recipient.SerializeJson(null);
            }
            if (this.ReplyToId != null)
            {
                outputObject["replyToId"] = this.ReplyToId;
            }
            if (this.ServiceUrl != null)
            {
                outputObject["serviceUrl"] = this.ServiceUrl;
            }
            if (this.Summary != null)
            {
                outputObject["summary"] = this.Summary;
            }
            if (this.Text != null)
            {
                outputObject["text"] = this.Text;
            }
            if (this.TextFormat != null)
            {
                outputObject["textFormat"] = this.TextFormat;
            }
            if (this.Timestamp != null)
            {
                outputObject["timestamp"] = this.Timestamp.Value;
            }
            if (this.TopicName != null)
            {
                outputObject["topicName"] = this.TopicName;
            }
            if (this.Type != null)
            {
                outputObject["type"] = this.Type;
            }
            if (this.Value != null)
            {
                outputObject["value"] = JObject.Parse(this.Value);
            }
            return outputObject;
        }
    }
}
