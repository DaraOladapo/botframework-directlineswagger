// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using ConsoleApplication2;
using ConsoleApplication2.Models;
using Microsoft.Rest;

namespace ConsoleApplication2
{
    public static partial class ConversationsExtensions
    {
        /// <param name='operations'>
        /// Reference to the ConsoleApplication2.IConversations.
        /// </param>
        /// <param name='conversationId'>
        /// Required. Conversation ID
        /// </param>
        /// <param name='watermark'>
        /// Optional. (Optional) only returns activities newer than this
        /// watermark
        /// </param>
        public static ActivitySet GetActivities(this IConversations operations, string conversationId, string watermark = null)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IConversations)s).GetActivitiesAsync(conversationId, watermark);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ConsoleApplication2.IConversations.
        /// </param>
        /// <param name='conversationId'>
        /// Required. Conversation ID
        /// </param>
        /// <param name='watermark'>
        /// Optional. (Optional) only returns activities newer than this
        /// watermark
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<ActivitySet> GetActivitiesAsync(this IConversations operations, string conversationId, string watermark = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ConsoleApplication2.Models.ActivitySet> result = await operations.GetActivitiesWithOperationResponseAsync(conversationId, watermark, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ConsoleApplication2.IConversations.
        /// </param>
        /// <param name='conversationId'>
        /// Required. Conversation ID
        /// </param>
        /// <param name='activity'>
        /// Required. Activity to send
        /// </param>
        public static ResourceResponse PostActivity(this IConversations operations, string conversationId, Activity activity)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IConversations)s).PostActivityAsync(conversationId, activity);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ConsoleApplication2.IConversations.
        /// </param>
        /// <param name='conversationId'>
        /// Required. Conversation ID
        /// </param>
        /// <param name='activity'>
        /// Required. Activity to send
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<ResourceResponse> PostActivityAsync(this IConversations operations, string conversationId, Activity activity, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ConsoleApplication2.Models.ResourceResponse> result = await operations.PostActivityWithOperationResponseAsync(conversationId, activity, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ConsoleApplication2.IConversations.
        /// </param>
        /// <param name='conversationId'>
        /// Required.
        /// </param>
        /// <param name='watermark'>
        /// Optional.
        /// </param>
        public static Conversation ReconnectToConversation(this IConversations operations, string conversationId, string watermark = null)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IConversations)s).ReconnectToConversationAsync(conversationId, watermark);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ConsoleApplication2.IConversations.
        /// </param>
        /// <param name='conversationId'>
        /// Required.
        /// </param>
        /// <param name='watermark'>
        /// Optional.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Conversation> ReconnectToConversationAsync(this IConversations operations, string conversationId, string watermark = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ConsoleApplication2.Models.Conversation> result = await operations.ReconnectToConversationWithOperationResponseAsync(conversationId, watermark, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ConsoleApplication2.IConversations.
        /// </param>
        public static Conversation StartConversation(this IConversations operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IConversations)s).StartConversationAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ConsoleApplication2.IConversations.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Conversation> StartConversationAsync(this IConversations operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ConsoleApplication2.Models.Conversation> result = await operations.StartConversationWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ConsoleApplication2.IConversations.
        /// </param>
        /// <param name='conversationId'>
        /// Required.
        /// </param>
        /// <param name='file'>
        /// Required.
        /// </param>
        /// <param name='userId'>
        /// Optional.
        /// </param>
        public static ResourceResponse Upload(this IConversations operations, string conversationId, Stream file, string userId = null)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IConversations)s).UploadAsync(conversationId, file, userId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ConsoleApplication2.IConversations.
        /// </param>
        /// <param name='conversationId'>
        /// Required.
        /// </param>
        /// <param name='file'>
        /// Required.
        /// </param>
        /// <param name='userId'>
        /// Optional.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<ResourceResponse> UploadAsync(this IConversations operations, string conversationId, Stream file, string userId = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ConsoleApplication2.Models.ResourceResponse> result = await operations.UploadWithOperationResponseAsync(conversationId, file, userId, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
