// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Linq;
using Newtonsoft.Json.Linq;

namespace ConsoleApplication2.Models
{
    public partial class Attachment
    {
        private string _content;
        
        /// <summary>
        /// Optional. Embedded content
        /// </summary>
        public string Content
        {
            get { return this._content; }
            set { this._content = value; }
        }
        
        private string _contentType;
        
        /// <summary>
        /// Optional. mimetype/Contenttype for the file
        /// </summary>
        public string ContentType
        {
            get { return this._contentType; }
            set { this._contentType = value; }
        }
        
        private string _contentUrl;
        
        /// <summary>
        /// Optional. Content Url
        /// </summary>
        public string ContentUrl
        {
            get { return this._contentUrl; }
            set { this._contentUrl = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// Optional. (OPTIONAL) The name of the attachment
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private string _thumbnailUrl;
        
        /// <summary>
        /// Optional. (OPTIONAL) Thumbnail associated with attachment
        /// </summary>
        public string ThumbnailUrl
        {
            get { return this._thumbnailUrl; }
            set { this._thumbnailUrl = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the Attachment class.
        /// </summary>
        public Attachment()
        {
        }
        
        /// <summary>
        /// Deserialize the object
        /// </summary>
        public virtual void DeserializeJson(JToken inputObject)
        {
            if (inputObject != null && inputObject.Type != JTokenType.Null)
            {
                JToken contentValue = inputObject["content"];
                if (contentValue != null && contentValue.Type != JTokenType.Null)
                {
                    this.Content = contentValue.ToString(Newtonsoft.Json.Formatting.Indented);
                }
                JToken contentTypeValue = inputObject["contentType"];
                if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                {
                    this.ContentType = ((string)contentTypeValue);
                }
                JToken contentUrlValue = inputObject["contentUrl"];
                if (contentUrlValue != null && contentUrlValue.Type != JTokenType.Null)
                {
                    this.ContentUrl = ((string)contentUrlValue);
                }
                JToken nameValue = inputObject["name"];
                if (nameValue != null && nameValue.Type != JTokenType.Null)
                {
                    this.Name = ((string)nameValue);
                }
                JToken thumbnailUrlValue = inputObject["thumbnailUrl"];
                if (thumbnailUrlValue != null && thumbnailUrlValue.Type != JTokenType.Null)
                {
                    this.ThumbnailUrl = ((string)thumbnailUrlValue);
                }
            }
        }
        
        /// <summary>
        /// Serialize the object
        /// </summary>
        /// <returns>
        /// Returns the json model for the type Attachment
        /// </returns>
        public virtual JToken SerializeJson(JToken outputObject)
        {
            if (outputObject == null)
            {
                outputObject = new JObject();
            }
            if (this.Content != null)
            {
                outputObject["content"] = JObject.Parse(this.Content);
            }
            if (this.ContentType != null)
            {
                outputObject["contentType"] = this.ContentType;
            }
            if (this.ContentUrl != null)
            {
                outputObject["contentUrl"] = this.ContentUrl;
            }
            if (this.Name != null)
            {
                outputObject["name"] = this.Name;
            }
            if (this.ThumbnailUrl != null)
            {
                outputObject["thumbnailUrl"] = this.ThumbnailUrl;
            }
            return outputObject;
        }
    }
}
